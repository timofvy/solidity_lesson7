/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Vesting, VestingInterface } from "../../01_Vesting.sol/Vesting";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_endTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_firstUnlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_secondUnlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_thirdUnlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_forthUnlock",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "distributeRights",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "endTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "firstUnlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "forthUnlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "getAvailableAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "secondUnlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "startTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "thirdUnlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000fba38038062000fba833981810160405281019062000037919062000190565b6200005367356f26a4a4201f7460c01b6200018d60201b60201c565b6200006f67365bd082e703e97360c01b6200018d60201b60201c565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000cb67fb013c6f54a965ec60c01b6200018d60201b60201c565b85600181905550620000ee679cf4ce524ae42ba960c01b6200018d60201b60201c565b84600281905550620001116708cec6365c1e6bd360c01b6200018d60201b60201c565b8360038190555062000134677d07c1b809ab70f160c01b6200018d60201b60201c565b826004819055506200015767c851d522bfc99eff60c01b6200018d60201b60201c565b816005819055506200017a67ed8aa047b423c47460c01b6200018d60201b60201c565b80600681905550505050505050620001db565b50565b60008060008060008060c08789031215620001aa57600080fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b610dcf80620001eb6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80634bc252f9116100715780634bc252f91461016857806374a56e1f1461018657806378e97925146101a25780638d8f2adb146101c05780638da5cb5b146101ca57806394d71387146101e8576100a9565b80631f3a71ba146100ae57806327e235e3146100de578063285e040c1461010e5780633197cbb61461012c5780633d8281a61461014a575b600080fd5b6100c860048036038101906100c39190610b1a565b610206565b6040516100d59190610b3d565b60405180910390f35b6100f860048036038101906100f39190610b1a565b610688565b6040516101059190610b3d565b60405180910390f35b6101166106a0565b6040516101239190610b3d565b60405180910390f35b6101346106a6565b6040516101419190610b3d565b60405180910390f35b6101526106ac565b60405161015f9190610b3d565b60405180910390f35b6101706106b2565b60405161017d9190610b3d565b60405180910390f35b6101a0600480360381019061019b9190610b4e565b6106b8565b005b6101aa6108ea565b6040516101b79190610b3d565b60405180910390f35b6101c86108f0565b005b6101d2610ace565b6040516101df9190610b7a565b60405180910390f35b6101f0610af2565b6040516101fd9190610b3d565b60405180910390f35b600061021c672029ceead9e63fea60c01b610af8565b61023067a1cb3164761ed4f160c01b610af8565b610244676a6640103988090c60c01b610af8565b6001544210156102935761026267ce189092a145b80b60c01b610af8565b61027667f3befc0d1df050d760c01b610af8565b61028a67239adf1bacdfad4c60c01b610af8565b60009050610683565b6102a767c6c369ed9d5e5edc60c01b610af8565b6102bb679d21181852a12a2f60c01b610af8565b60015442101580156102db57506003546001546102d89190610ba9565b42105b1561037b576102f4678af98dc1228dc7f360c01b610af8565b610308677e60b6f946d0ede860c01b610af8565b61031c6717620e83e6334af560c01b610af8565b6064600a600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461036a9190610bc7565b6103749190610be9565b9050610683565b61038f6726eb583ec246b1b160c01b610af8565b6103a367c4a2fb22356e390560c01b610af8565b6003546001546103b39190610ba9565b42101580156103d057506004546001546103cd9190610ba9565b42105b15610470576103e9672083a7e2689a7d6060c01b610af8565b6103fd671810ca84c5067b5660c01b610af8565b61041167fb17c19eaf26d8c760c01b610af8565b6064601e600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461045f9190610bc7565b6104699190610be9565b9050610683565b61048467b29b48cb2093842260c01b610af8565b610498674fd231d9cb58b05b60c01b610af8565b6004546001546104a89190610ba9565b42101580156104c557506005546001546104c29190610ba9565b42105b15610565576104de674aef2efa2d8bfd8760c01b610af8565b6104f267314d089aca7ee5de60c01b610af8565b610506678378e51ae1fd823960c01b610af8565b60646032600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105549190610bc7565b61055e9190610be9565b9050610683565b610579670b564bef826bff7360c01b610af8565b61058d67998ae98ea07ed2d360c01b610af8565b60055460015461059d9190610ba9565b42101580156105ba57506006546001546105b79190610ba9565b42105b15610642576105d3670d51f0a077e8260860c01b610af8565b6105e767d4ee90f4df0af4e260c01b610af8565b6105fb67f448fe5aa430a89060c01b610af8565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610683565b61065667cf2fdfdb73557ea160c01b610af8565b61066a678c8cdfedd5c449fc60c01b610af8565b61067e67fd7d6048e6bb73ab60c01b610af8565b600090505b919050565b60076020528060005260406000206000915090505481565b60065481565b60025481565b60045481565b60035481565b6106cc67da176132848a7d0a60c01b610af8565b6106e0672c3424a359ae7aa460c01b610af8565b6106f467ad2c21838a7a79f460c01b610af8565b6107086740e2d9ac5377c22b60c01b610af8565b61071c671efe8147108ccf9060c01b610af8565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a190610c11565b60405180910390fd5b6107be67935d0b494f077fc360c01b610af8565b6107d267d1e56413057f809060c01b610af8565b6107e6676e686aa1b6e4943160c01b610af8565b6107fa6742ea9e73a9d97e5460c01b610af8565b61080e67e0fd7090aa6e7c6260c01b610af8565b61082267bcc8d2ae3633711260c01b610af8565b610836677c5dd6a1ac4d6ddd60c01b610af8565b600154421061087a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087190610c75565b60405180910390fd5b61088e677cefafd75cf2284c60c01b610af8565b6108a2676fcc7be2ffc79e7460c01b610af8565b80600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60015481565b61090467c0ed3a034a22ad5d60c01b610af8565b610918673c1ed205b1b9c6ea60c01b610af8565b61092c670c5f34d2fb6b40bc60c01b610af8565b61094067ef1f098e1cdccd6360c01b610af8565b600154421015610985576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097c90610cb3565b60405180910390fd5b61099967f3f4416fe2a3d8bd60c01b610af8565b6109ad679f34af6b589a528960c01b610af8565b6109c1672e0c698841826a5f60c01b610af8565b60006109cc33610206565b90506109e267068718cec100d84460c01b610af8565b6109f66717d26dd9358206d860c01b610af8565b610a0a678e5b4c4ebab56e9060c01b610af8565b60008111610a4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4490610d17565b60405180910390fd5b610a6167e1b854a5cda4d43e60c01b610af8565b610a7567253949011008387960c01b610af8565b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ac49190610d7b565b9250508190555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b50565b60008135905060018060a01b0381168114610b1557600080fd5b919050565b600060208284031215610b2c57600080fd5b610b3582610afb565b905092915050565b600060208201905082825292915050565b60008060408385031215610b6157600080fd5b610b6a83610afb565b9150602083013590509250929050565b600060208201905060018060a01b038316825292915050565b634e487b7160e01b600052601160045260246000fd5b6000828201905080821115610bc157610bc0610b93565b5b92915050565b600082820290508181048314821517610be357610be2610b93565b5b92915050565b600082610c0657634e487b7160e01b600052601260045260246000fd5b828204905092915050565b60208152602a60208201527f4f6e6c7920636f6e7472616374206f776e65722063616e2063616c6c2074686960408201527f732066756e6374696f6e0000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152601d60208201527f446973747269627574696f6e20706572696f642068617320656e64656400000060408201526000606082019050919050565b60208152602160208201527f5769746864726177616c20706572696f6420686173206e6f742073746172746560408201527f640000000000000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152602260208201527f4e6f20746f6b656e7320617661696c61626c6520666f7220776974686472617760408201527f616c00000000000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b6000828203905081811115610d9357610d92610b93565b5b9291505056fea264697066735822122038d7ae0176ce00f47732851c87edf782e0c968ae3336947833b8eceaab96bba264736f6c63430008140033";

type VestingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VestingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Vesting__factory extends ContractFactory {
  constructor(...args: VestingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _startTime: PromiseOrValue<BigNumberish>,
    _endTime: PromiseOrValue<BigNumberish>,
    _firstUnlock: PromiseOrValue<BigNumberish>,
    _secondUnlock: PromiseOrValue<BigNumberish>,
    _thirdUnlock: PromiseOrValue<BigNumberish>,
    _forthUnlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Vesting> {
    return super.deploy(
      _startTime,
      _endTime,
      _firstUnlock,
      _secondUnlock,
      _thirdUnlock,
      _forthUnlock,
      overrides || {}
    ) as Promise<Vesting>;
  }
  override getDeployTransaction(
    _startTime: PromiseOrValue<BigNumberish>,
    _endTime: PromiseOrValue<BigNumberish>,
    _firstUnlock: PromiseOrValue<BigNumberish>,
    _secondUnlock: PromiseOrValue<BigNumberish>,
    _thirdUnlock: PromiseOrValue<BigNumberish>,
    _forthUnlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _startTime,
      _endTime,
      _firstUnlock,
      _secondUnlock,
      _thirdUnlock,
      _forthUnlock,
      overrides || {}
    );
  }
  override attach(address: string): Vesting {
    return super.attach(address) as Vesting;
  }
  override connect(signer: Signer): Vesting__factory {
    return super.connect(signer) as Vesting__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VestingInterface {
    return new utils.Interface(_abi) as VestingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Vesting {
    return new Contract(address, _abi, signerOrProvider) as Vesting;
  }
}
